<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="ClothingPicker" id="1" localization="8" tooltip="NAO will tell you what clothing to wear based on the temperature and wind speed" x="472" y="121">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        import json
        import requests

        proxy = ALProxy("ALTextToSpeech")

        baseurl = "http://api.openweathermap.org/data/2.5/weather?appid=33d6e073a153d55dea7b80db0456ddcc&q=Ellensburg"

        response = requests.get(baseurl)

        python_dictionary_values = json.loads(response.text)

        if python_dictionary_values["cod"] == 200:

            # store the value of main key in y
            t = python_dictionary_values["main"]
            w = python_dictionary_values["wind"]

            # store the current temp and convert the temp
            current_temperature = t["temp"]
            converted_temperature = (current_temperature - 273.15) * 9 / 5 + 32

            current_wind = w["speed"]
            converted_wind = current_wind / 1.609344

            if converted_temperature <= 32:
                if converted_wind < 7:
                        proxy.say("its a little chilly but not too breezy, feel free to put on a warm coat")
                elif converted_wind >= 7 and converted_wind <= 10:
                        proxy.say("its a little chilly and a little breezy, please wear a warm coat and hat")
                elif converted_wind > 10:
                        proxy.say("its a little chilly and quite breezy, please wear a parka and a hat")

            elif converted_temperature > 32 and converted_temperature <= 65:
                if converted_wind < 7:
                    proxy.say("its a bit on the cold side but not too breezy, feel free to wear a long sleeved t-shirt")
                elif converted_wind >= 7 and converted_wind <= 10:
                    proxy.say("its a bit on the cold side and a little breezy, please wear a windbreaker")
                elif converted_wind > 10:
                    proxy.say("its a little chilly and quite breezy, please wear a windbreaker and a hat")

            elif converted_temperature > 65:
                if converted_wind < 7:
                    proxy.say("its a bit warm outside, feel free to wear shorts and a t-shirt")
                elif converted_wind >= 7 and converted_wind <= 10:
                    proxy.say("its a bit warm and a little breezy, feel free to wear shorts and a t-shirt, maybe bring a long sleeved t-shirt just in case")
                elif converted_wind > 10:
                    proxy.say("its a bit warm and quite breezy, please bring a light jacket with you")

        # city not found
        else:
              proxy.say("im sorry there was an error")

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
