<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="WhichClass" id="1" localization="8" tooltip="NAO asks which class you would like to know more about." x="58" y="98">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        tts = ALProxy("ALTextToSpeech")
        tts.say("Which class would you like to know about. I've taken all of them!")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Speech Reco." id="4" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="176" y="212">
              <bitmap>media/images/box/interaction/ear.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                classList = [
                    "one oh one",
                    "one oh five",
                    "one oh seven",
                    "one ten",
                    "one eleven",
                    "one twelve",
                    "two fifty",
                    "three oh one",
                    "three oh two",
                    "three eleven",
                    "three twelve",
                    "three twenty five",
                    "three sixty one",
                    "three sixty two",
                    "three seventy",
                    "three eighty",
                    "three ninety two",
                    "four twenty",
                    "four twenty seven",
                    "four twenty eight",
                    "four fourty",
                    "four fourty five",
                    "four fourty six",
                    "four fifty six",
                    "four sixty",
                    "four seventy",
                    "four seventy one",
                    "four eigthy",
                    "four eighty one",
                    "four eighty nine",
                    "four ninety two",
                    "exit",
                    "quit",
                    "stop"
                ]
                self.asr.setVocabulary( classList, self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
              <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
              <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
              <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
              <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
              <Resource name="Speech recognition" type="Lock" timeout="0" />
            </Box>
            <Box name="Switch Case" id="3" localization="8" tooltip="" x="234" y="40">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        p = self.typeConversion(p)

        stop_commands = [
            "stop",
            "exit",
            "quit"
            ]

        if(p in stop_commands):
            self.exit()
        else:
            self.onDefault(p)
            self.onStopped()

    def typeConversion(self, p):
        try:
            p = float(p)
            pint = int(p)
            if( p == pint ):
                p = pint
        except:
            p = str(p)
        return p

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="1" inner="0" tooltip="Runs when a string is input" id="2" />
              <Output name="onDefault" type="3" type_size="1" nature="2" inner="0" tooltip="When any other string was input" id="3" />
              <Output name="exit" type="1" type_size="1" nature="2" inner="0" tooltip='activates when &quot;exit&quot; &quot;stop&quot; or &quot;quit&quot; was called' id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
            </Box>
            <Box name="Describe Class" id="7" localization="8" tooltip="Gives the user a breif description about a requested class" x="503" y="176">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[
className = ""

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        global className

        #consts with the desription of the class
        #100 level classes########################################
        #101
        COMPUTER_BASICS = "In C S one oh one you will partake in an Integrated, project-based course using student-produced working materials in the form of a mini thesis. Microsoft Office tools are learned in a web-based practical application environment."
        #105
        THE_LOGICAL_BASIS_OF_COMPUTING = "In C S one oh five Students develop mathematical and quantitative reasoning skills by learning the fundamentals of computer programming. Students gain an understanding of possible connections between technology and artistic expression."
        #107
        MAKE_A_GAME_WITH_COMPUTER_SCIENCE = "C S one oh seven provides an overview of gaming within the field of computer science including social, cultural, ethical, legal, and economic issues. Software engineering principles will be introduced and applied to a game development."
        #110
        PROGRAMMING_FUNDAMENTALS = "In C S one ten you will learn of the Fundamental concepts of programming from an object-oriented perspective. You will learn about Classes, objects and methods, algorithm development, problem-solving techniques, basic control structures, primitive types and arrays."
        #111
        PROGRAMMING_FUNDAMENTALS_TWO = "C S one twelve is a Continuation of object-oriented programming concepts introduced in C S one ten. You will learn about Inheritance, exceptions, graphical user interfaces, recursion, and data structures."
        #112
        FOUNDATIONS_OF_COMPUTER_SCIENCE = "C S one twelves provides an Overview of the computer science profession including basic computer organization, algorithm development and analysis, computer data representation, computer applications, and social issues."

        #200 level classes#########################################
        #250
        WEB_DEVELOPMENT_TECHNOLOGIES_ONE = "In C S two fifty you will learn Techniques for web software development including X H T M L, style sheets, scripting languages, web databases, P H P, and ethical issues."

        #300 level classes#########################################
        #301
        DATA_STRUCTURES = "C S three oh one is awesome! You will receive an Introduction to data structures, simple list processing, basic searching and sorting techniques, stacks, queues, and trees."
        #302
        ADVANCED_DATA_STRUCTURES_AND_FILE_PROCESSING = "C S three oh two will teach you about Sequential, random access and indexed file organizations B trees, external searching and sorting, and I O buffering."
        #311
        COMPUTER_ARCHITECTURE_ONE = "C S three eleven is a really hard one, but super important. You will get an Introduction to computer architecture, data representations, assembly language, and addressing techniques."
        #312
        COMPUTER_ARCHITECTURE_TWO = "C S three twelves gives an Introduction to the structure of computers. Digital circuits, central processing units, memory, input output processing, and parallel architectures."
        #325
        TECHNICAL_WRITING_IN_COMPUTER_SCIENCE = "C S three twenty five is very interesting. You will experience Writing and editing technical material in the domain of computer science."
        #361
        PRINCIPLES_OF_LANGUAGE_DESIGN_ONE = "C S three sixty one introduces Topics such as the evolution of programming languages, syntax and semantics, bindings, scoping, data types, assignment, control, and subprograms."
        #362
        PRINCIPLES_OF_LANGUAGE_DESIGN_TWO = "C S three sixty two covers Topics such as abstract data types, parallel processing, object-oriented programming, exception handling functional programming, and logic programming."
        #370
        INTRODUCTION_TO_THE_UNIX_OPERATING_SYSTEM = "C S three seventy was one of my favorite classes. You will learn about The fundamental requirements, features and functions of the you-nix operating system. A you-nix compatible OS will be used as a working model. Installation, configuration, setup, shell operations, and program development with the you-nix operating system. "
        #380
        INTRODUCTION_TO_SOFTWARE_ENGINEERING = "C S three eighty is a very important class. It provides An introduction to the principles and practices of software engineering, including object-oriented analysis and design, design patterns, and testing."
        #392
        LAB_EXPERIENCE_IN_TEACHING_COMPUTER_SCIENCE_THREE_HUNDRED = "C S three ninety two requires you to be a T A for a lower level C S class."

        #400 level classes#########################################
        #420
        DATABASE_MANAGEMENT_SYSTEMS = "In C S four twenty you learn about databases. The class covers the Logical aspects of database processing, concepts of organizing data into integrated databases, hierarchical, network, and relational approaches."
        #427
        ALGORITHM_ANALYSIS = "C S four twenty seven Topics will include basic algorithmic analysis, algorithmic strategies, fundamental computing algorithms, basic computability, the complexity classes P and N P, and advanced algorithmic analysis."
        #428
        INTRODUCTION_TO_GRAPH_ALGORITHMS = "C S four twenty eight gives a wide introduction to the field of graph algorithms. Students will learn how to recognize and analyze algorithmic graph problems, as well as how to develop practical approaches for solving them."
        #440
        COMPUTER_GRAPHICS = "C S four forty covers Graphic I O devices, two-dimensional and three-dimensional display techniques, display processors, clipping and windowing, hidden line removal, and data structures for graphics."
        #445
        DATA_AND_INFORMATION_VISUALIZATION = "C S four forty five Data visualization includes the visualization pipeline, basic and advanced visual data representations, fundamental and advanced visualization algorithms, visualization on the web, applications and software tools."
        #446
        USER_INTERFACE_DESIGN_AND_DEVELOPMENT = "C S four forty six covers The relationship of user interface design to human-computer interaction. Types of user interfaces, methods of evaluation, user-centered design and task analysis, programming tools and environments, and hardware devices. Be prepared for lots of usability testing!"
        #456
        DATA_MINING = "C S four fifty six Introduces concepts, models, algorithms, and tools for solving data mining tasks. Also covered are decision trees, time series, Bayesian methods, k nearest neighbors, and relational databases."
        #460
        SOFTWARE_ENGINEERING_FOR_MOBILE_DEVICES = "C S four sixty covers the Development of stand-alone applications intended to be downloaded onto and run on mobile devices. Android and i O S is taught. Topics include X M L, data and control flow diagrams, layout design, and more."
        #470
        OPERATING_SYSTEMS = "C S four seventy is a hard class for sure, but also very informative! Topics will include principles of operating systems, concurrency, scheduling and dispatch, memory management, processes and threads, device management, security and protection, and file systems."
        #471
        OPTIMIZATION = "C S four seventy one covers Unimodal and Multimodal problems, combinatorial optimization problems, deterministic algorithms, Hill climbing algorithm, Tabu Search Algorithm, Evolutionary algorithms, Particle swarm optimization, Differential evolution, and Single and Mutli-objective optimization."
        #480
        ADVANCED_SOFTWARE_ENGINEERING = "C S four eighty is the first part of the senior capstone project. The class covers Advanced principles and practices of software engineering, including project management, requirements gathering and specification, design, coding, testing, maintenance and documentation. Students are assigned to teams to develop a large software project."
        #481
        SOFTWARE_ENGINEERING_PROJECT = "C S four eighty one is the second part of the senior capstone project. Continuation of coding, testing, and implementation phases of project begun in c s four eighty."
        #489
        SENIOR_COLLOQUIUM = "C S four eighty nine is an Introduction to research in computer science through investigation of ethical and historical topics in the field. You will also take the M F T exam in the test, be prepared to study!"
        #492
        LABORATORY_EXPERIENCE_IN_TEACHING_COMPUTER_SCIENCE_FOUR_HUNDRED = "In C S four ninety two, you will act as a T A for upper level C S classes."


        classes = {
            "cs101" : COMPUTER_BASICS,
            "cs105" : THE_LOGICAL_BASIS_OF_COMPUTING,
            "cs107" : MAKE_A_GAME_WITH_COMPUTER_SCIENCE,
            "cs110" : PROGRAMMING_FUNDAMENTALS,
            "cs111" : PROGRAMMING_FUNDAMENTALS_TWO,
            "cs112" : FOUNDATIONS_OF_COMPUTER_SCIENCE,
            "cs250" : WEB_DEVELOPMENT_TECHNOLOGIES_ONE,
            "cs301" : DATA_STRUCTURES,
            "cs302" : ADVANCED_DATA_STRUCTURES_AND_FILE_PROCESSING,
            "cs311" : COMPUTER_ARCHITECTURE_ONE,
            "cs312" : COMPUTER_ARCHITECTURE_TWO,
            "cs325" : TECHNICAL_WRITING_IN_COMPUTER_SCIENCE,
            "cs361" : PRINCIPLES_OF_LANGUAGE_DESIGN_ONE,
            "cs362" : PRINCIPLES_OF_LANGUAGE_DESIGN_TWO,
            "cs370" : INTRODUCTION_TO_THE_UNIX_OPERATING_SYSTEM,
            "cs380" : INTRODUCTION_TO_SOFTWARE_ENGINEERING,
            "cs392" : LAB_EXPERIENCE_IN_TEACHING_COMPUTER_SCIENCE_THREE_HUNDRED,
            "cs420" : DATABASE_MANAGEMENT_SYSTEMS,
            "cs427" : ALGORITHM_ANALYSIS,
            "cs428" : INTRODUCTION_TO_GRAPH_ALGORITHMS,
            "cs440" : COMPUTER_GRAPHICS,
            "cs445" : DATA_AND_INFORMATION_VISUALIZATION,
            "cs446" : USER_INTERFACE_DESIGN_AND_DEVELOPMENT,
            "cs456" : DATA_MINING,
            "cs460" : SOFTWARE_ENGINEERING_FOR_MOBILE_DEVICES,
            "cs470" : OPERATING_SYSTEMS,
            "cs471" : OPTIMIZATION,
            "cs480" : ADVANCED_SOFTWARE_ENGINEERING,
            "cs481" : SOFTWARE_ENGINEERING_PROJECT,
            "cs489" : SENIOR_COLLOQUIUM,
            "cs492" : LABORATORY_EXPERIENCE_IN_TEACHING_COMPUTER_SCIENCE_FOUR_HUNDRED
        }

        # NEW CODE HERE (KILL US NOW PLS)

        tts = ALProxy("ALTextToSpeech")

        tts.say(classes[className])

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_className(self, p):
        global className

        if p == "Computer Basics" or p == "one oh one":
            className = "cs101"
        elif p == "Logical Basis of Computing" or p == "one oh five":
            className = "cs105"
        elif p == "Make a Game with Computer Science" or p == "one oh seven":
            className = "cs107"
        elif p == "Programming Fundamentals One" or p == "one ten":
            className = "cs110"
        elif p == "Programming Fundamentals Two" or p == "one eleven":
            className = "cs111"
        elif p == "Foundations of Computer Science" or p == "one twelve":
            className = "cs112"
        elif p == "Web Development Technologies One" or p == "two fifty":
            className = "cs250"
        elif p == "Data Structures" or p == "three oh one":
            className = "cs301"
        elif p == "Advanced Data Structures and File Processing" or p == "three oh two":
            className = "cs302"
        elif p == "Computer Architecture One" or p == "three eleven":
            className = "cs311"
        elif p == "Computer Architecture Two" or p == "three twelve":
            className = "cs312"
        elif p == "Technical Writing in Computer Science" or p == "three twenty five":
            className = "cs325"
        elif p == "Principles of Language Design One" or p == "three sixty one":
            className = "cs361"
        elif p == "Principles of Language Design Two" or p == "three sixty two":
            className = "cs362"
        elif p == "Introduction to the Unix Operating System" or p == "three seventy":
            className = "cs370"
        elif p == "Introduction to Software Engineering" or p == "three eighty":
            className = "cs380"
        elif p == "Lab Experience in Teaching Computer Science Three Hundred" or p == "three ninety two":
            className = "cs392"
        elif p == "Database Management Systems" or p == "four twenty":
            className = "cs420"
        elif p == "Algorithm Analysis" or p == "four twenty seven":
            className = "cs427"
        elif p == "Introduction to Graph Algorithms" or p == "four twenty eight":
            className = "cs428"
        elif p == "Introduction to Computer Security" or p == "four thirty":
            className = "cs430"
        elif p == "Computer Graphics" or p == "four forty":
            className = "cs440"
        elif p == "Data and Information Visualization" or p == "four forty five":
            className = "cs445"
        elif p == "User Interface Design and Development" or p == "four forty six":
            className = "cs446"
        elif p == "Data Mining" or p == "four fifty six":
            className = "cs456"
        elif p == "Software Engineering for Mobile Devices" or p == "four sixty":
            className = "cs460"
        elif p == "Operating Systems" or p == "four seventy":
            className = "cs470"
        elif p == "Optimization" or p == "four seventy one":
            className = "cs471"
        elif p == "Advanced Software Engineering" or p == "four eighty":
            className = "cs480"
        elif p == "Software Engineering Project" or p == "four eighty one":
            className = "cs481"
        elif p == "Senior Colloquium" or p == "four eighty nine":
            className = "cs489"
        elif p == "Laboratory Experience in Teaching Computer Science Four Hundred" or p == "four ninety two":
            className = "cs492"]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="className" type="3" type_size="1" nature="1" inner="0" tooltip="The name of the class being requested" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
            </Box>
            <Box name="Ask again" id="6" localization="8" tooltip="Say some text. The text can be localized." x="251" y="389">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALTextToSpeech')
        self.ttsStop = self.session().service('ALTextToSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += self.getParameter("Text")
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence))
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
              <Parameter name="Text" inherits_from_parent="0" content_type="5" value="What other class would you like to know about?" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Goodbye" id="2" localization="8" tooltip="See ya later nerds" x="502" y="35">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        tts = ALProxy("ALTextToSpeech")
        tts.say("Thank you for asking about our classes, have a nice day!")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="6" indexofinput="2" outputowner="7" indexofoutput="5" />
            <Link inputowner="4" indexofinput="2" outputowner="6" indexofoutput="4" />
            <Link inputowner="4" indexofinput="3" outputowner="4" indexofoutput="5" />
            <Link inputowner="7" indexofinput="4" outputowner="3" indexofoutput="3" />
            <Link inputowner="3" indexofinput="2" outputowner="4" indexofoutput="5" />
            <Link inputowner="7" indexofinput="2" outputowner="3" indexofoutput="5" />
            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
